@Component is a decorator function that specifies the Angular metadata for the component and has three metadata properties

   - selector - the component's CSS element selector
   - templateUrl - the location of the component's template file.
   - styleUrls - the location of the component's private CSS styles.
 
Components shouldn't fetch or save data directly and they certainly shouldn't knowingly present fake data. It primarily resposibility is to focus on presenting data and delegate data access to a service.
   
The ngOnInit is a lifecycle hook. Angular calls ngOnInit shortly after creating a component. It's a good place to put initialization logic.

Always export the component class so you can import it elsewhere.. like in the AppModule.

Interpolation binding we can do either with upper or lower case right after the pipe operator(|), activates the built-in UppercasePipe.

[(ngModel)] is Angular's two-way data binding syntax. ngModel is a valid Angular directive, it isn't available by default. It belongs to the optional FormsModule and you must opt-in to using it.

Angular needs to know how the pieces of your application fit together and what other files and libraries the app requires. This information is called metadata.
Some of the metadata is in the @Component decorators that you added to your component classes. Other critical metadata is in @NgModule decorators. 
The most important @NgModule decorator annotates the top-level AppModule class.
Every component must be declared in exactly one NgModule.

The *ngFor is Angular's repeater directive. It repeats the host element for each element in a list.
@Input property - template binds to the component's parent property which is of type Parent.
The two components will have a parent/child relationship. The parent component will control the child component by sending it a new
to display whenever the we select element in parent component.

@Input decorator to make the any property available for binding by the external or child component.

Services are a great way to share information among classes that don't know each other.
@Injectable decorator which marks the class as one that participates in the dependency injections system. Any service class is going to provide an injectable service, and it can alo have its own injected dependencies. 
@Injectable() decorator accepts a metadata object for the service, the same way the @Component() decorator for component classes.

We must make the Service available to the dependency injection system before Angular can inject it into the Component. We can do this by registering a provider. 

A provider is something that can create or deliver a service; We are registering it with an injector, which is the object that is responsible for choosing and injecting the provider where it is required.
